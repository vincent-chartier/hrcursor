{"ast":null,"code":"const GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent';\nexport const generateContent = async prompt => {\n  if (!GEMINI_API_KEY) {\n    throw new Error('Gemini API key is not configured');\n  }\n  try {\n    var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 1024\n        },\n        safetySettings: [{\n          category: \"HARM_CATEGORY_HARASSMENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        }, {\n          category: \"HARM_CATEGORY_HATE_SPEECH\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        }, {\n          category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        }, {\n          category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        }]\n      })\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      throw new Error(`Gemini API error: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || response.statusText}`);\n    }\n    const data = await response.json();\n    if (!((_data$candidates = data.candidates) !== null && _data$candidates !== void 0 && (_data$candidates$ = _data$candidates[0]) !== null && _data$candidates$ !== void 0 && (_data$candidates$$con = _data$candidates$.content) !== null && _data$candidates$$con !== void 0 && (_data$candidates$$con2 = _data$candidates$$con.parts) !== null && _data$candidates$$con2 !== void 0 && (_data$candidates$$con3 = _data$candidates$$con2[0]) !== null && _data$candidates$$con3 !== void 0 && _data$candidates$$con3.text)) {\n      throw new Error('Invalid response format from Gemini API');\n    }\n    return data.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error('Error generating content:', error);\n    throw error;\n  }\n};\nexport const generateJobDescription = async posting => {\n  const prompt = `Generate a detailed job description for a ${posting.title} position in the ${posting.department} department of a ${posting.storeType}. \nThe position is ${posting.employmentType} with ${posting.shift} shift, requiring ${posting.experience} level experience.\nLocation: ${posting.location}\nSalary range: ${posting.salary.min} - ${posting.salary.max} ${posting.salary.currency}\n\nPhysical Requirements:\n${posting.physicalRequirements.map(req => `- ${req}`).join('\\n')}\n\nBenefits:\n${posting.benefits.map(benefit => `- ${benefit}`).join('\\n')}\n\nPlease write a professional job description that includes:\n1. A brief overview of the role\n2. Key responsibilities\n3. Required qualifications\n4. Physical requirements\n5. Benefits and perks\n6. Why someone should work here\n\nMake it engaging and professional, suitable for a job posting.`;\n  return generateContent(prompt);\n};","map":{"version":3,"names":["GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","GEMINI_API_URL","generateContent","prompt","Error","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","threshold","ok","_errorData$error","errorData","json","error","message","statusText","data","candidates","content","console","generateJobDescription","posting","title","department","storeType","employmentType","shift","experience","location","salary","min","max","currency","physicalRequirements","map","req","join","benefits","benefit"],"sources":["/Users/vchartier/Projects/HRCursor/src/services/gemini.ts"],"sourcesContent":["import { JobPosting } from '../types';\n\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent';\n\nexport const generateContent = async (prompt: string): Promise<string> => {\n  if (!GEMINI_API_KEY) {\n    throw new Error('Gemini API key is not configured');\n  }\n\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 1024,\n        },\n        safetySettings: [\n          {\n            category: \"HARM_CATEGORY_HARASSMENT\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          },\n          {\n            category: \"HARM_CATEGORY_HATE_SPEECH\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          },\n          {\n            category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          },\n          {\n            category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          }\n        ]\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText}`);\n    }\n\n    const data = await response.json();\n    if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {\n      throw new Error('Invalid response format from Gemini API');\n    }\n    return data.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error('Error generating content:', error);\n    throw error;\n  }\n};\n\nexport const generateJobDescription = async (posting: Omit<JobPosting, 'id' | 'description'>): Promise<string> => {\n  const prompt = `Generate a detailed job description for a ${posting.title} position in the ${posting.department} department of a ${posting.storeType}. \nThe position is ${posting.employmentType} with ${posting.shift} shift, requiring ${posting.experience} level experience.\nLocation: ${posting.location}\nSalary range: ${posting.salary.min} - ${posting.salary.max} ${posting.salary.currency}\n\nPhysical Requirements:\n${posting.physicalRequirements.map(req => `- ${req}`).join('\\n')}\n\nBenefits:\n${posting.benefits.map(benefit => `- ${benefit}`).join('\\n')}\n\nPlease write a professional job description that includes:\n1. A brief overview of the role\n2. Key responsibilities\n3. Required qualifications\n4. Physical requirements\n5. Benefits and perks\n6. Why someone should work here\n\nMake it engaging and professional, suitable for a job posting.`;\n\n  return generateContent(prompt);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}