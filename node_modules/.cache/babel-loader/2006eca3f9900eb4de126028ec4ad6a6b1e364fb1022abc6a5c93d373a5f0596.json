{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const processCV = async file => {\n  try {\n    // Convert file to base64\n    const base64Data = await fileToBase64(file);\n\n    // Use Gemini to analyze the CV content\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\"\n    });\n    const prompt = `Analyze this CV and extract the following information in a structured format:\n    - Full name\n    - Email address\n    - Phone number (if available)\n    - Location (if available)\n    - Work experience (company, position, dates, description)\n    - Education (institution, degree, field, graduation date)\n    - Skills\n    - Languages\n    - Certifications\n    \n    Format the response as a JSON object with these exact keys:\n    {\n      \"name\": string,\n      \"email\": string,\n      \"phone\": string | null,\n      \"location\": string | null,\n      \"workExperience\": Array<{\n        \"company\": string,\n        \"position\": string,\n        \"startDate\": string,\n        \"endDate\": string | null,\n        \"description\": string\n      }>,\n      \"education\": Array<{\n        \"institution\": string,\n        \"degree\": string,\n        \"field\": string,\n        \"graduationDate\": string\n      }>,\n      \"skills\": string[],\n      \"languages\": string[],\n      \"certifications\": string[]\n    }`;\n    const result = await model.generateContent([prompt, {\n      inlineData: {\n        mimeType: file.type,\n        data: base64Data\n      }\n    }]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the JSON response\n    const extractedData = JSON.parse(text);\n    return extractedData;\n  } catch (error) {\n    console.error('Error processing CV:', error);\n    throw new Error('Failed to process CV');\n  }\n};\n\n// Helper function to convert File to base64\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const base64String = reader.result;\n      // Remove the data URL prefix (e.g., \"data:image/jpeg;base64,\")\n      const base64Data = base64String.split(',')[1];\n      resolve(base64Data);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\n// Convert extracted data to Candidate type\nexport const convertToCandidate = extractedData => {\n  // Get the most recent position from work experience\n  const position = extractedData.workExperience.length > 0 ? extractedData.workExperience[0].position : 'Not Specified';\n\n  // Calculate a basic match score based on experience and education\n  const matchScore = Math.min(100, 50 +\n  // Base score\n  extractedData.workExperience.length * 5 +\n  // Points for each work experience\n  extractedData.education.length * 5 +\n  // Points for each education entry\n  extractedData.skills.length * 2 +\n  // Points for each skill\n  extractedData.languages.length * 3 // Points for each language\n  );\n  return {\n    name: extractedData.name,\n    email: extractedData.email,\n    phone: extractedData.phone || '',\n    location: extractedData.location || '',\n    position,\n    status: 'new',\n    matchScore,\n    experience: extractedData.workExperience.map(exp => ({\n      company: exp.company,\n      position: exp.position,\n      startDate: exp.startDate,\n      endDate: exp.endDate || 'Present',\n      description: exp.description\n    })),\n    education: extractedData.education.map(edu => ({\n      institution: edu.institution,\n      degree: edu.degree,\n      field: edu.field,\n      graduationDate: edu.graduationDate\n    })),\n    skills: extractedData.skills,\n    languages: extractedData.languages,\n    certifications: extractedData.certifications,\n    notes: '',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n};","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","processCV","file","base64Data","fileToBase64","model","getGenerativeModel","prompt","result","generateContent","inlineData","mimeType","type","data","response","text","extractedData","JSON","parse","error","console","Error","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","base64String","split","onerror","convertToCandidate","position","workExperience","length","matchScore","Math","min","education","skills","languages","name","email","phone","location","status","experience","map","exp","company","startDate","endDate","description","edu","institution","degree","field","graduationDate","certifications","notes","createdAt","Date","toISOString","updatedAt"],"sources":["/Users/vchartier/Projects/HRCursor/src/services/cvProcessor.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { Candidate } from '../types';\n\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\n\ninterface ExtractedCVData {\n  name: string;\n  email: string;\n  phone?: string;\n  location?: string;\n  workExperience: Array<{\n    company: string;\n    position: string;\n    startDate: string;\n    endDate?: string;\n    description: string;\n  }>;\n  education: Array<{\n    institution: string;\n    degree: string;\n    field: string;\n    graduationDate: string;\n  }>;\n  skills: string[];\n  languages: string[];\n  certifications: string[];\n}\n\nexport const processCV = async (file: File): Promise<ExtractedCVData> => {\n  try {\n    // Convert file to base64\n    const base64Data = await fileToBase64(file);\n    \n    // Use Gemini to analyze the CV content\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n    \n    const prompt = `Analyze this CV and extract the following information in a structured format:\n    - Full name\n    - Email address\n    - Phone number (if available)\n    - Location (if available)\n    - Work experience (company, position, dates, description)\n    - Education (institution, degree, field, graduation date)\n    - Skills\n    - Languages\n    - Certifications\n    \n    Format the response as a JSON object with these exact keys:\n    {\n      \"name\": string,\n      \"email\": string,\n      \"phone\": string | null,\n      \"location\": string | null,\n      \"workExperience\": Array<{\n        \"company\": string,\n        \"position\": string,\n        \"startDate\": string,\n        \"endDate\": string | null,\n        \"description\": string\n      }>,\n      \"education\": Array<{\n        \"institution\": string,\n        \"degree\": string,\n        \"field\": string,\n        \"graduationDate\": string\n      }>,\n      \"skills\": string[],\n      \"languages\": string[],\n      \"certifications\": string[]\n    }`;\n\n    const result = await model.generateContent([\n      prompt,\n      {\n        inlineData: {\n          mimeType: file.type,\n          data: base64Data\n        }\n      }\n    ]);\n\n    const response = await result.response;\n    const text = response.text();\n    \n    // Parse the JSON response\n    const extractedData: ExtractedCVData = JSON.parse(text);\n    \n    return extractedData;\n  } catch (error) {\n    console.error('Error processing CV:', error);\n    throw new Error('Failed to process CV');\n  }\n};\n\n// Helper function to convert File to base64\nconst fileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const base64String = reader.result as string;\n      // Remove the data URL prefix (e.g., \"data:image/jpeg;base64,\")\n      const base64Data = base64String.split(',')[1];\n      resolve(base64Data);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\n// Convert extracted data to Candidate type\nexport const convertToCandidate = (extractedData: ExtractedCVData): Omit<Candidate, 'id'> => {\n  // Get the most recent position from work experience\n  const position = extractedData.workExperience.length > 0\n    ? extractedData.workExperience[0].position\n    : 'Not Specified';\n\n  // Calculate a basic match score based on experience and education\n  const matchScore = Math.min(\n    100,\n    50 + // Base score\n    (extractedData.workExperience.length * 5) + // Points for each work experience\n    (extractedData.education.length * 5) + // Points for each education entry\n    (extractedData.skills.length * 2) + // Points for each skill\n    (extractedData.languages.length * 3) // Points for each language\n  );\n\n  return {\n    name: extractedData.name,\n    email: extractedData.email,\n    phone: extractedData.phone || '',\n    location: extractedData.location || '',\n    position,\n    status: 'new',\n    matchScore,\n    experience: extractedData.workExperience.map(exp => ({\n      company: exp.company,\n      position: exp.position,\n      startDate: exp.startDate,\n      endDate: exp.endDate || 'Present',\n      description: exp.description\n    })),\n    education: extractedData.education.map(edu => ({\n      institution: edu.institution,\n      degree: edu.degree,\n      field: edu.field,\n      graduationDate: edu.graduationDate\n    })),\n    skills: extractedData.skills,\n    languages: extractedData.languages,\n    certifications: extractedData.certifications,\n    notes: '',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}