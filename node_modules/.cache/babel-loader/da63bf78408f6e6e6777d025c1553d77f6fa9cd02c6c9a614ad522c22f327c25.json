{"ast":null,"code":"const GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\nexport const generateJobDescription = async posting => {\n  if (!GEMINI_API_KEY) {\n    throw new Error('Gemini API key is not configured');\n  }\n  const prompt = `Generate a detailed job description for a ${posting.title} position in the ${posting.department} department of a ${posting.storeType}. \nThe position is ${posting.employmentType} with ${posting.shift} shift, requiring ${posting.experience} level experience.\nLocation: ${posting.location}\nSalary range: ${posting.salary.min} - ${posting.salary.max} ${posting.salary.currency}\n\nPhysical Requirements:\n${posting.physicalRequirements.map(req => `- ${req}`).join('\\n')}\n\nBenefits:\n${posting.benefits.map(benefit => `- ${benefit}`).join('\\n')}\n\nPlease write a professional job description that includes:\n1. A brief overview of the role\n2. Key responsibilities\n3. Required qualifications\n4. Physical requirements\n5. Benefits and perks\n6. Why someone should work here\n\nMake it engaging and professional, suitable for a job posting.`;\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to generate job description');\n    }\n    const data = await response.json();\n    return data.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error('Error generating job description:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","GEMINI_API_URL","generateJobDescription","posting","Error","prompt","title","department","storeType","employmentType","shift","experience","location","salary","min","max","currency","physicalRequirements","map","req","join","benefits","benefit","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","ok","data","json","candidates","content","error","console"],"sources":["/Users/vchartier/Projects/HRCursor/src/services/gemini.ts"],"sourcesContent":["import { JobPosting } from '../types';\n\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\n\nexport const generateJobDescription = async (posting: Omit<JobPosting, 'id' | 'description'>): Promise<string> => {\n  if (!GEMINI_API_KEY) {\n    throw new Error('Gemini API key is not configured');\n  }\n\n  const prompt = `Generate a detailed job description for a ${posting.title} position in the ${posting.department} department of a ${posting.storeType}. \nThe position is ${posting.employmentType} with ${posting.shift} shift, requiring ${posting.experience} level experience.\nLocation: ${posting.location}\nSalary range: ${posting.salary.min} - ${posting.salary.max} ${posting.salary.currency}\n\nPhysical Requirements:\n${posting.physicalRequirements.map(req => `- ${req}`).join('\\n')}\n\nBenefits:\n${posting.benefits.map(benefit => `- ${benefit}`).join('\\n')}\n\nPlease write a professional job description that includes:\n1. A brief overview of the role\n2. Key responsibilities\n3. Required qualifications\n4. Physical requirements\n5. Benefits and perks\n6. Why someone should work here\n\nMake it engaging and professional, suitable for a job posting.`;\n\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to generate job description');\n    }\n\n    const data = await response.json();\n    return data.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error('Error generating job description:', error);\n    throw error;\n  }\n}; "],"mappings":"AAEA,MAAMA,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAC3D,MAAMC,cAAc,GAAG,oFAAoF;AAE3G,OAAO,MAAMC,sBAAsB,GAAG,MAAOC,OAA+C,IAAsB;EAChH,IAAI,CAACN,cAAc,EAAE;IACnB,MAAM,IAAIO,KAAK,CAAC,kCAAkC,CAAC;EACrD;EAEA,MAAMC,MAAM,GAAG,6CAA6CF,OAAO,CAACG,KAAK,oBAAoBH,OAAO,CAACI,UAAU,oBAAoBJ,OAAO,CAACK,SAAS;AACtJ,kBAAkBL,OAAO,CAACM,cAAc,SAASN,OAAO,CAACO,KAAK,qBAAqBP,OAAO,CAACQ,UAAU;AACrG,YAAYR,OAAO,CAACS,QAAQ;AAC5B,gBAAgBT,OAAO,CAACU,MAAM,CAACC,GAAG,MAAMX,OAAO,CAACU,MAAM,CAACE,GAAG,IAAIZ,OAAO,CAACU,MAAM,CAACG,QAAQ;AACrF;AACA;AACA,EAAEb,OAAO,CAACc,oBAAoB,CAACC,GAAG,CAACC,GAAG,IAAI,KAAKA,GAAG,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AAChE;AACA;AACA,EAAEjB,OAAO,CAACkB,QAAQ,CAACH,GAAG,CAACI,OAAO,IAAI,KAAKA,OAAO,EAAE,CAAC,CAACF,IAAI,CAAC,IAAI,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;EAE7D,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGvB,cAAc,QAAQJ,cAAc,EAAE,EAAE;MACtE4B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,CAAC;YACNC,IAAI,EAAE3B;UACR,CAAC;QACH,CAAC;MACH,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACkB,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAI7B,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,MAAM8B,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;EACjD,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}